(load "./../src/04-number-games.scm")
(load "./../lib/test-manager/load.scm")

(in-test-group
 04-numbers-games
 (define-test (add1-test)
   (assert-equal 68 (add1 67)))
 (define-test (sub1-test)
   (assert-equal 4 (sub1 5)))
 (define-test (zero-test)
   (assert-true (zero? 0))
   (assert-false (zero? 1492)))
 (define-test (multiply-test)
   (assert-equal 15 (multiply 5 3)))
 (define-test (plus-test)
   (assert-equal 58 (plus 46 12)
                 "non primitive addition"))
 (define-test (minus-test)
   (assert-equal 11 (minus 14 3)
                 "non primitive subtraction"))
 (define-test (tup+-test)
   (assert-equal '(11 11 11 11 11)
                 (tup+ '(3 6 9 11 4 )
                       '(8 5 2 0 7))
                 "Add two tuples")
   (assert-equal '(7 13 8 1)
                 (tup+ '(3 7)
                       '(4 6 8 1))
                 "Add two tuples of different length"))
 (define-test (gt?-test)
   (assert-false (gt? 12 133))
   (assert-true (gt? 120 11))
   (assert-false (gt? 5 5)))
 (define-test (lt?-test)
   (assert-true (lt? 4 6))
   (assert-false (lt? 8 3))
   (assert-false (lt? 3 3)))
 (define-test (=?-test)
   (assert-true (=? 2 2))
   (assert-false (=? 2 1)))
 (define-test (power-test)
   (assert-equal 1 (power 1 1))
   (assert-equal 8 (power 2 3))
   (assert-equal 125 (power 5 3)))
 (define-test (divide-test)
   (assert-equals 3 (divide 15 4)))
 (define-test (length-test)
   (assert-equal 6 (length '(hotdogs with mustard sauerkraut and pickles)))
   (assert-equal 0 (length '())
                 "Length of empty list is zero"))
 (define-test (pick-test)
   (assert-equal 'macaroni
                 (pick 4 '(lasagna spaghetti ravioli macaroni meatball))))
 (define-test (rempick-test)
   (assert-equal '(hotdogs with mustard)
                 (rempick 3 '(hotdogs with hot mustard))))
 (define-test (no-nums-test)
   (assert-equal '(a x t t ss s s)
                 (no-nums '(a 1 x 2 t t 3 ss s s))
                 "remove non numbers"))
 (define-test (all-nums-test)
   (assert-equal '(1 2 3 4)
                 (all-nums '(q 1 e 2 e 3 e 4 n n))))
 (define-test (equan-test)
   (assert-true (eqan? 1 1))
   (assert-true (eqan? 'a 'a)))
 (define-test (occur-tests)
   (assert-equal 1 (occur 1 '(1 2 3 2 3)))
   (assert-equal 3 (occur 'a '(1 a c 3 a 2 a))))
 (define-test (one-tests)
   (assert-true (one? 1))
   (assert-false (one? 2))))

(run-registered-tests)


