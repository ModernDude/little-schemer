(load "./../src/source.scm")
(load "./../lib/test-manager/load.scm")

(in-test-group
 toys
 (define-test (atom-tests)
   (assert-true (atom? 'turkey) "Symbol is an atom")
   (assert-true (atom? 1492) "Number is an atom")
   (assert-true (atom? 'u) "Sumbol length 1 is an atom")
   (assert-true (atom? '*abc$) "Symbol with special chars is atom")
   (assert-false (atom? '()) "Empty list is not an atom"))
 (define-test (car-tests)
   (assert-equal 'a
                 (car '(a b c))
                 "Car removes first atom in non empty list")
   (assert-equal '(a b c)
                 (car '((a b c) x y z))
                 "Removes a list")
   (assert-equal '((hotdogs))
                 (car '(((hotdogs)) (and) (pickle) relish))
                 "Remove list of list"))
 (define-test (cdr-tests)
   (assert-equal '(b c)
                 (cdr '(a b c))
                 "from non empty list")
   (assert-equal '(x y z)
                 (cdr '((a b c) x y z))
                 "from nested sexp")
   (assert-equal '()
                 (cdr '(hamburger))
                 "empty when list length 1"))
 (define-test (cons-tests)
   (assert-equal '(peanut butter and jelly)
                 (cons 'peanut '(butter and jelly))
                 "Cons symbol onto list")
   (assert-equal '((banana and) peanut butter and jelly)
                 (cons '(banana and) '(peanut butter and jelly))
                 "Cons list onto list")
   (assert-equal '(((help) this) is very ((hard) to learn))
                 (cons '((help) this) '(is very ((hard) to learn)))
                 "cons sexp onto sexp")
   (assert-equal '((a b (c))) (cons '(a b (c)) '())
                 "cons sexp onto empty list")
   (assert-equal '(a) (cons 'a '())
                 "cons symbol onto empty list"))
 (define-test (null-tests)
   (assert-true (null? '()) "empty list is null")
   (assert-false (null? '(a b c)) "non empty list is not null")
   (assert-false (null? 'spaghetti) "symbol is not null"))
 )


(in-test-group
 do-it-do-it-again-and-again-and-again
 (define-test (atom-test)
   (assert-true (lat? '(Jack Sprat could eat no chicken fat))
                "many symbols is as list is a lat")
   (assert-false (lat? '((Jack) could eat no chicken fat))
                 "sexp of symbols is not lat")
   (assert-true (lat? '())
                "empty list is a lat"))
 (define-test (member-test)
   (assert-false (member? 'poached '(fried eggs and scrambled eggs))
                 "Symbol is not in list")
   (assert-true (member? 'meat '(mashed potatoes and meat gravy))
                 "Symbol is in list")
   (assert-false (member? 'liver '())
                 "Symbol is not in empty list")))

(in-test-group
 cons-the-magnificent
 (define-test (rember-test)
   (assert-equal '(lamb chops and jelly)
                 (rember 'mint '(lamb chops and mint jelly))
                 "Remove one symbol from list")
   (assert-equal '(lamb chops and flavored mint jelly)
                 (rember 'mint '(lamb chops and mint flavored mint jelly))
                 "Only remove first symbol from list")
   (assert-equal '(lamb chops and jelly)
                 (rember 'missing '(lamb chops and jelly))
                 "Do not remove when member not found."))
 (define-test (firsts-test)
   (assert-equal '(apple plum grape bean)
                 (firsts '((apple peach pumpkin)
                           (plum pear cherry)
                           (grape raisin pea)
                           (bean carrot eggplant)))
                 "first item in each listt"))
 (define-test (insertR-test)
   (assert-equal '(ice cream with fudge topping for dessert)
                 (insertR 'topping 'fudge '(ice cream with fudge for dessert))
                 "insert symb to right of another")
   (assert-equal '(ice cream with fudge for dessert)
                 (insertR 'topping 'bogus '(ice cream with fudge for dessert))
                 "insert not found "))
 (define-test (insertL-test)
   (assert-equal '(ice cream with topping fudge for dessert)
                 (insertL 'topping 'fudge '(ice cream with fudge for dessert))
                 "insert found value to left of symbol")
   (assert-equal '(ice cream with fudge for dessert)
                 (insertL 'topping 'bogus '(ice cream with fudge for dessert))
                 "insert not found"))
 (define-test (subst2-test)
   (assert-equal '(vanilla ice cream with chocolate topping)
                 (subst2 'vanilla 'chocolate 'banana
                         '(banana ice cream with chocolate topping))
                 "change first found value")
   (assert-equal '(vanilla bananna ice cream with  topping)
                 (subst2 'vanilla 'bananna 'chocolate
                         '(chocolate bananna ice cream with topping))
                 "second search symb is found first"))
 (define-test (multirember-test)
   (assert-equal '(coffee tea and hick)
                 (multirember 'cup '(coffee cup tea cup and hick cup))
                 "remove item when in list twice"))
 (define-test (multiinsertR-test)
   (assert-equal '(i love coffee tea and more coffee tea)
                 (multiinsertR 'tea 'coffee 
                               '(i love coffee and more coffee))
                 "insert 2 values to right"))
 (define-test (multiinsertL-test)
   (assert-equal '(i love tea coffee and more tea coffee)
                 (multiinsertL  'tea 'coffee 
                                    '(i love coffee and more coffee))
                 "isnert 2 values to left"))
 (define-test (multisubst-test)
   (assert-equal '(a a a)
                 (multisubst 'a 'b  '(b b b))
                 "replace all occurences of b with a")
   (assert-equal '(a a a)
                 (multisubst 'q 'f '(a a a))
                 "no replacements found")))


(in-test-group
 numbers-games
 (define-test (add1-test)
   (assert-equal 68 (add1 67)))
 (define-test (sub1-test)
   (assert-equal 4 (sub1 5)))
 (define-test (zero-test)
   (assert-true (zero? 0))
   (assert-false (zero? 1492)))
 (define-test (multiply-test)
   (assert-equal 15 (multiply 5 3)))
 (define-test (plus-test)
   (assert-equal 58 (plus 46 12)
                 "non primitive addition"))
 (define-test (minus-test)
   (assert-equal 11 (minus 14 3)
                 "non primitive subtraction"))
 (define-test (tup+-test)
   (assert-equal '(11 11 11 11 11)
                 (tup+ '(3 6 9 11 4 )
                       '(8 5 2 0 7))
                 "Add two tuples")
   (assert-equal '(7 13 8 1)
                 (tup+ '(3 7)
                       '(4 6 8 1))
                 "Add two tuples of different length"))
 (define-test (gt?-test)
   (assert-false (gt? 12 133))
   (assert-true (gt? 120 11))
   (assert-false (gt? 5 5)))
 (define-test (lt?-test)
   (assert-true (lt? 4 6))
   (assert-false (lt? 8 3))
   (assert-false (lt? 3 3)))
 (define-test (=?-test)
   (assert-true (=? 2 2))
   (assert-false (=? 2 1)))
 (define-test (power-test)
   (assert-equal 1 (power 1 1))
   (assert-equal 8 (power 2 3))
   (assert-equal 125 (power 5 3)))
 (define-test (divide-test)
   (assert-equals 3 (divide 15 4)))
 (define-test (length-test)
   (assert-equal 6 (length '(hotdogs with mustard sauerkraut and pickles)))
   (assert-equal 0 (length '())
                 "Length of empty list is zero"))
 (define-test (pick-test)
   (assert-equal 'macaroni
                 (pick 4 '(lasagna spaghetti ravioli macaroni meatball))))
 (define-test (rempick-test)
   (assert-equal '(hotdogs with mustard)
                 (rempick 3 '(hotdogs with hot mustard))))
 (define-test (no-nums-test)
   (assert-equal '(a x t t ss s s)
                 (no-nums '(a 1 x 2 t t 3 ss s s))
                 "remove non numbers"))
 (define-test (all-nums-test)
   (assert-equal '(1 2 3 4)
                 (all-nums '(q 1 e 2 e 3 e 4 n n))))
 (define-test (equan-test)
   (assert-true (eqan? 1 1))
   (assert-true (eqan? 'a 'a)))
 (define-test (occur-tests)
   (assert-equal 1 (occur 1 '(1 2 3 2 3)))
   (assert-equal 3 (occur 'a '(1 a c 3 a 2 a))))
 (define-test (one-tests)
   (assert-true (one? 1))
   (assert-false (one? 2))))


(in-test-group
 05-oh-my-gawd-its-full-of-stars
 (define-test (rember*-tests)
   (assert-equal '(coffee tea)
                 (rember* 'cup '(cup coffee cup tea cup))
                 "Remove atoms from list")
   (assert-equal '((coffee) ((tea)) (and (hick)))
                 (rember* 'cup '((coffee) cup ((tea) cup) (and (hick)) cup))
                 "Remove atoms from sexp"))
 (define-test (insertR*-tests)
   (assert-equal '(first second third)
                (insertR* 'second 'first '(first third))
                "insert to right in list" )
   (assert-equal '((how much (wood))
                   could
                   ((a (wood) chuck roast))
                   (((chuck roast)))
                   (if (a) ((wood chuck roast)))
                   could chuck roast wood)
                 (insertR*
                  'roast
                  'chuck
                   '((how much (wood))
                    could
                    ((a (wood) chuck))
                    (((chuck)))
                    (if (a) ((wood chuck)))
                    could chuck wood))
                 "Insert to right in a sexp"))
 (define-test (occur*-tests)
   (assert-equal 0
                 (occur* 'a '(b c d))
                 "zero when not found in list")
   (assert-equal 3
                 (occur* 'a '(a b a c d e a))
                 "atom found in list")
   (assert-equal 4
                 (occur* 'a '(a (b a) (a (j j a))))
                 "atom found in sexp"))
 (define-test (subst*-tests)
   (assert-equal '(a b c d)
                 (subst* 'e 'f '(a b c d))
                 "subst not found")
   (assert-equal '(a f c d f)
                 (subst* 'f 'b '(a b c d b))
                 "found in list")
   (assert-equal '(a f c d (x f (f) f))
                 (subst* 'f 'b '(a b c d (x b (b) b)))
                 "found in sexp"))
 (define-test (insertL*-tests)
   (assert-equal '(a b c e)
                 (insertL* 'x 'f '(a b c e))
                 "not found in list")
   (assert-equal '(a b c x e x e)
                 (insertL* 'x 'e '(a b c e e))
                 "insert to left i nlist")
   (assert-equal '(x b (x b a (x b a) x b a))
                 (insertL* 'x 'b '(b (b a (b a) b a)))))
 (define-test (member*-tests)
   (assert-false (member* 'a '(b c d)) "not in list")
   (assert-true (member* 'a '(a b e d)) "found in list")
   (assert-true (member* 'a '(b (b a))) "found in sexp"))
 (define-test (leftmost)
   (assert-equal 'a (leftmost '(a b c d)) "left most in list")
   (assert-equal 'a (leftmost '(((a (((a b c))))))) "left most in sexp"))
 (define-test (_equal?-tests)
   (assert-true (_equal? '() '()) "empty lists are equal")
   (assert-true (_equal? 'a 'a) "same atoms are equal")
   (assert-true (_equal? 3 3) "numbers equal")
   (assert-true (_equal? '(1 2 3) '(1 2 3)) "list of nums eq")
   (assert-true (_equal? '(a b c) '(a b c)) "list of atoms eq")
   (assert-true (_equal? '(a 1 b 2) '(a 1 b 2)) "list nums and atoms eq")
   (assert-false (_equal? 'a 'b) "diff atoms not eq")
   (assert-false (_equal? 2 1) "diff noms not eq")
   (assert-false (_equal? '(1 2 3) '(1 2 3 4)) "list nums not eq")
   (assert-false (_equal? '(a b c) '(a b c d)) "list atoms not eq"))
 (define-test (eqlist?-tests)
   (assert-true (eqlist? '(1 2 3) '(1 2 3)) "list of nums are eq")
   (assert-false (eqlist? '(1 2 3) '(1 2)) "number list is not equal")
   (assert-true (eqlist? '(a b c) '(a b c)) "atom list is equal")
   (assert-false (eqlist? '(a b c) '(a b)) "atom list is not equal")
   (assert-true (eqlist? '(a 1) '(a 1)) "atom and num list is eq")
   (assert-false (eqlist? '(a 2) '(a 1)) "atom and num list is not eq")
   (assert-true (eqlist? '(a (a 2 (a))) '(a (a 2 (a)))) "sexp is eq")
   (assert-false (eqlist? '(a (1 2 a)) '(x (1 2 a))) "sexp is not eq")))






 (run-registered-tests)  





