(load "./../src/source.scm")
(load "./../lib/test-manager/load.scm")

(in-test-group
 01-toys
 (define-test (atom-tests)
   (assert-true (atom? 'turkey) "Symbol is an atom")
   (assert-true (atom? 1492) "Number is an atom")
   (assert-true (atom? 'u) "Sumbol length 1 is an atom")
   (assert-true (atom? '*abc$) "Symbol with special chars is atom")
   (assert-false (atom? '()) "Empty list is not an atom"))
 (define-test (car-tests)
   (assert-equal 'a
                 (car '(a b c))
                 "Car removes first atom in non empty list")
   (assert-equal '(a b c)
                 (car '((a b c) x y z))
                 "Removes a list")
   (assert-equal '((hotdogs))
                 (car '(((hotdogs)) (and) (pickle) relish))
                 "Remove list of list"))
 (define-test (cdr-tests)
   (assert-equal '(b c)
                 (cdr '(a b c))
                 "from non empty list")
   (assert-equal '(x y z)
                 (cdr '((a b c) x y z))
                 "from nested sexp")
   (assert-equal '()
                 (cdr '(hamburger))
                 "empty when list length 1"))
 (define-test (cons-tests)
   (assert-equal '(peanut butter and jelly)
                 (cons 'peanut '(butter and jelly))
                 "Cons symbol onto list")
   (assert-equal '((banana and) peanut butter and jelly)
                 (cons '(banana and) '(peanut butter and jelly))
                 "Cons list onto list")
   (assert-equal '(((help) this) is very ((hard) to learn))
                 (cons '((help) this) '(is very ((hard) to learn)))
                 "cons sexp onto sexp")
   (assert-equal '((a b (c))) (cons '(a b (c)) '())
                 "cons sexp onto empty list")
   (assert-equal '(a) (cons 'a '())
                 "cons symbol onto empty list"))
 (define-test (null-tests)
   (assert-true (null? '()) "empty list is null")
   (assert-false (null? '(a b c)) "non empty list is not null")
   (assert-false (null? 'spaghetti) "symbol is not null"))
 )

(in-test-group
 02-do-it-do-it-again-and-again-and-again
 (define-test (atom-test)
   (assert-true (lat? '(Jack Sprat could eat no chicken fat))
                "many symbols is as list is a lat")
   (assert-false (lat? '((Jack) could eat no chicken fat))
                 "sexp of symbols is not lat")
   (assert-true (lat? '())
                "empty list is a lat"))
 (define-test (member-test)
   (assert-false (member? 'poached '(fried eggs and scrambled eggs))
                 "Symbol is not in list")
   (assert-true (member? 'meat '(mashed potatoes and meat gravy))
                "Symbol is in list")
   (assert-false (member? 'liver '())
                 "Symbol is not in empty list")))

(in-test-group
 03-cons-the-magnificent
 (define-test (rember-test)
   (assert-equal '(lamb chops and jelly)
                 (rember 'mint '(lamb chops and mint jelly))
                 "Remove one symbol from list")
   (assert-equal '(lamb chops and flavored mint jelly)
                 (rember 'mint '(lamb chops and mint flavored mint jelly))
                 "Only remove first symbol from list")
   (assert-equal '(lamb chops and jelly)
                 (rember 'missing '(lamb chops and jelly))
                 "Do not remove when member not found."))
 (define-test (firsts-test)
   (assert-equal '(apple plum grape bean)
                 (firsts '((apple peach pumpkin)
                           (plum pear cherry)
                           (grape raisin pea)
                           (bean carrot eggplant)))
                 "first item in each listt"))
 (define-test (insertR-test)
   (assert-equal '(ice cream with fudge topping for dessert)
                 (insertR 'topping 'fudge '(ice cream with fudge for dessert))
                 "insert symb to right of another")
   (assert-equal '(ice cream with fudge for dessert)
                 (insertR 'topping 'bogus '(ice cream with fudge for dessert))
                 "insert not found "))
 (define-test (insertL-test)
   (assert-equal '(ice cream with topping fudge for dessert)
                 (insertL 'topping 'fudge '(ice cream with fudge for dessert))
                 "insert found value to left of symbol")
   (assert-equal '(ice cream with fudge for dessert)
                 (insertL 'topping 'bogus '(ice cream with fudge for dessert))
                 "insert not found"))
 (define-test (subst2-test)
   (assert-equal '(vanilla ice cream with chocolate topping)
                 (subst2 'vanilla 'chocolate 'banana
                         '(banana ice cream with chocolate topping))
                 "change first found value")
   (assert-equal '(vanilla bananna ice cream with  topping)
                 (subst2 'vanilla 'bananna 'chocolate
                         '(chocolate bananna ice cream with topping))
                 "second search symb is found first"))
 (define-test (multirember-test)
   (assert-equal '(coffee tea and hick)
                 (multirember 'cup '(coffee cup tea cup and hick cup))
                 "remove item when in list twice"))
 (define-test (multiinsertR-test)
   (assert-equal '(i love coffee tea and more coffee tea)
                 (multiinsertR 'tea 'coffee
                               '(i love coffee and more coffee))
                 "insert 2 values to right"))
 (define-test (multiinsertL-test)
   (assert-equal '(i love tea coffee and more tea coffee)
                 (multiinsertL  'tea 'coffee
                                '(i love coffee and more coffee))
                 "isnert 2 values to left"))
 (define-test (multisubst-test)
   (assert-equal '(a a a)
                 (multisubst 'a 'b  '(b b b))
                 "replace all occurences of b with a")
   (assert-equal '(a a a)
                 (multisubst 'q 'f '(a a a))
                 "no replacements found")))

(in-test-group
 04-numbers-games
 (define-test (add1-test)
   (assert-equal 68 (add1 67)))
 (define-test (sub1-test)
   (assert-equal 4 (sub1 5)))
 (define-test (zero-test)
   (assert-true (zero? 0))
   (assert-false (zero? 1492)))
 (define-test (multiply-test)
   (assert-equal 15 (multiply 5 3)))
 (define-test (plus-test)
   (assert-equal 58 (plus 46 12)
                 "non primitive addition"))
 (define-test (minus-test)
   (assert-equal 11 (minus 14 3)
                 "non primitive subtraction"))
 (define-test (tup+-test)
   (assert-equal '(11 11 11 11 11)
                 (tup+ '(3 6 9 11 4 )
                       '(8 5 2 0 7))
                 "Add two tuples")
   (assert-equal '(7 13 8 1)
                 (tup+ '(3 7)
                       '(4 6 8 1))
                 "Add two tuples of different length"))
 (define-test (gt?-test)
   (assert-false (gt? 12 133))
   (assert-true (gt? 120 11))
   (assert-false (gt? 5 5)))
 (define-test (lt?-test)
   (assert-true (lt? 4 6))
   (assert-false (lt? 8 3))
   (assert-false (lt? 3 3)))
 (define-test (=?-test)
   (assert-true (=? 2 2))
   (assert-false (=? 2 1)))
 (define-test (power-test)
   (assert-equal 1 (power 1 1))
   (assert-equal 8 (power 2 3))
   (assert-equal 125 (power 5 3)))
 (define-test (divide-test)
   (assert-equals 3 (divide 15 4)))
 (define-test (length-test)
   (assert-equal 6 (length '(hotdogs with mustard sauerkraut and pickles)))
   (assert-equal 0 (length '())
                 "Length of empty list is zero"))
 (define-test (pick-test)
   (assert-equal 'macaroni
                 (pick 4 '(lasagna spaghetti ravioli macaroni meatball))))
 (define-test (rempick-test)
   (assert-equal '(hotdogs with mustard)
                 (rempick 3 '(hotdogs with hot mustard))))
 (define-test (no-nums-test)
   (assert-equal '(a x t t ss s s)
                 (no-nums '(a 1 x 2 t t 3 ss s s))
                 "remove non numbers"))
 (define-test (all-nums-test)
   (assert-equal '(1 2 3 4)
                 (all-nums '(q 1 e 2 e 3 e 4 n n))))
 (define-test (equan-test)
   (assert-true (eqan? 1 1))
   (assert-true (eqan? 'a 'a)))
 (define-test (occur-tests)
   (assert-equal 1 (occur 1 '(1 2 3 2 3)))
   (assert-equal 3 (occur 'a '(1 a c 3 a 2 a))))
 (define-test (one-tests)
   (assert-true (one? 1))
   (assert-false (one? 2))))

(in-test-group
 05-oh-my-gawd-its-full-of-stars
 (define-test (rember*-tests)
   (assert-equal '(coffee tea)
                 (rember* 'cup '(cup coffee cup tea cup))
                 "Remove atoms from list")
   (assert-equal '((coffee) ((tea)) (and (hick)))
                 (rember* 'cup '((coffee) cup ((tea) cup) (and (hick)) cup))
                 "Remove atoms from sexp"))
 (define-test (insertR*-tests)
   (assert-equal '(first second third)
                 (insertR* 'second 'first '(first third))
                 "insert to right in list" )
   (assert-equal '((how much (wood))
                   could
                   ((a (wood) chuck roast))
                   (((chuck roast)))
                   (if (a) ((wood chuck roast)))
                   could chuck roast wood)
                 (insertR*
                  'roast
                  'chuck
                  '((how much (wood))
                    could
                    ((a (wood) chuck))
                    (((chuck)))
                    (if (a) ((wood chuck)))
                    could chuck wood))
                 "Insert to right in a sexp"))
 (define-test (occur*-tests)
   (assert-equal 0
                 (occur* 'a '(b c d))
                 "zero when not found in list")
   (assert-equal 3
                 (occur* 'a '(a b a c d e a))
                 "atom found in list")
   (assert-equal 4
                 (occur* 'a '(a (b a) (a (j j a))))
                 "atom found in sexp"))
 (define-test (subst*-tests)
   (assert-equal '(a b c d)
                 (subst* 'e 'f '(a b c d))
                 "subst not found")
   (assert-equal '(a f c d f)
                 (subst* 'f 'b '(a b c d b))
                 "found in list")
   (assert-equal '(a f c d (x f (f) f))
                 (subst* 'f 'b '(a b c d (x b (b) b)))
                 "found in sexp"))
 (define-test (insertL*-tests)
   (assert-equal '(a b c e)
                 (insertL* 'x 'f '(a b c e))
                 "not found in list")
   (assert-equal '(a b c x e x e)
                 (insertL* 'x 'e '(a b c e e))
                 "insert to left i nlist")
   (assert-equal '(x b (x b a (x b a) x b a))
                 (insertL* 'x 'b '(b (b a (b a) b a)))))
 (define-test (member*-tests)
   (assert-false (member* 'a '(b c d)) "not in list")
   (assert-true (member* 'a '(a b e d)) "found in list")
   (assert-true (member* 'a '(b (b a))) "found in sexp"))
 (define-test (leftmost)
   (assert-equal 'a (leftmost '(a b c d)) "left most in list")
   (assert-equal 'a (leftmost '(((a (((a b c))))))) "left most in sexp"))
 (define-test (_equal?-tests)
   (assert-true (_equal? '() '()) "empty lists are equal")
   (assert-true (_equal? 'a 'a) "same atoms are equal")
   (assert-true (_equal? 3 3) "numbers equal")
   (assert-true (_equal? '(1 2 3) '(1 2 3)) "list of nums eq")
   (assert-true (_equal? '(a b c) '(a b c)) "list of atoms eq")
   (assert-true (_equal? '(a 1 b 2) '(a 1 b 2)) "list nums and atoms eq")
   (assert-false (_equal? 'a 'b) "diff atoms not eq")
   (assert-false (_equal? 2 1) "diff noms not eq")
   (assert-false (_equal? '(1 2 3) '(1 2 3 4)) "list nums not eq")
   (assert-false (_equal? '(a b c) '(a b c d)) "list atoms not eq"))
 (define-test (eqlist?-tests)
   (assert-true (eqlist? '(1 2 3) '(1 2 3)) "list of nums are eq")
   (assert-false (eqlist? '(1 2 3) '(1 2)) "number list is not equal")
   (assert-true (eqlist? '(a b c) '(a b c)) "atom list is equal")
   (assert-false (eqlist? '(a b c) '(a b)) "atom list is not equal")
   (assert-true (eqlist? '(a 1) '(a 1)) "atom and num list is eq")
   (assert-false (eqlist? '(a 2) '(a 1)) "atom and num list is not eq")
   (assert-true (eqlist? '(a (a 2 (a))) '(a (a 2 (a)))) "sexp is eq")
   (assert-false (eqlist? '(a (1 2 a)) '(x (1 2 a))) "sexp is not eq")))

(in-test-group
 06-shadows
 (define-test (numbered?-tests)
   (assert-true (numbered? 2) "Number is always true")
   (assert-true (numbered? '(1 + 1)) "single infix addition is true")
   (assert-true (numbered? '(4 + (1 + 1))) "combined infix is true")
   (assert-false (numbered? 'a) "symbol fails")
   (assert-false (numbered? '(+ 2 2)) "prefix with numbers fails")
   (assert-false (numbered? '(2 + (+ 2 2))) "prefix in sexp fails"))
 (define-test (1st-sub-exp-tests)
   (assert-equal 2 (1st-sub-exp '(2 * 3)))
   (assert-equal '* (operator '(2 * 3)))
   (assert-equal 3 (2nd-sub-exp '(2 * 3))))
 (define-test (value-tests)
   (assert-equal 20 (value '(5 * 4)) "value of single exression")
   (assert-equal 20 (value '(5 * (2 + 2))) "value of nested exressions"))
 (define-test (zzero?-tests)
   (assert-true (zzero? '()) "sum of zero parens is zero")
   (assert-false (zzero? '(())) "sum of one zero is not zero")
   )
 (define-test (zadd1-tests)
   (assert-true 5 (zadd1 '(()()()())) "add to non empty list")
   (assert-true 1 (zadd1 '()) "add to empty list"))
 (define-test (zsub1-tests)
   (assert-true 1 (zsub1 '(()())) "sub from non empty list")
   ;;(assert-true -1 (zsub1 '()) "sub from empty list; won't work. don't have representation for this.")
   )
 (define-test (zplus-tests)
   (assert-true 0 (zplus '() '()) "two empty lists added is zero")
   (assert-true 2 (zplus '(()) '(())) "add two non empty lists")))

(in-test-group
 07-friends-and-relations
 (define-test (set-tests)
   (assert-true (set? '()) "empty lat is set")
   (assert-true (set? '(1 2 3)) "unique numbeurs lat is set")
   (assert-false (set? '(1 2 2)) "lat with dup numbers is not set")
   (assert-true (set? '(a b c)) "unique symbol lat is set")
   (assert-false (set? '(a b b c)) "dup symbol lat is set")
   (assert-true (set? '(a b 1 2)) "unique symbols and numbers"))
 (define-test (subset?-tests)
   (assert-true (subset? '() '()) "empty list is subset of empty list")
   (assert-true (subset? '(2) '(2 3)) "one number found in list")
   (assert-false (subset? '(2) '(3 4)) "number not found in list")
   (assert-true (subset? '(2 0 3) '(3 0 4 2)) "numbers found in list")
   (assert-false (subset? '(2 0 3) '(3 0 4 5)) "numbers not found in second"))
 (define-test (eqset?-tests)
   (assert-true (eqset? '() '()) "empty sets are equal")
   (assert-true (eqset? '(1 2) '(1 2)) "same sets equal")
   (assert-false (eqset? '(1 3) '(1 2 3)) "not equal")
   (assert-false (eqset? '(1 (1 2)) '(1 (1 2 3))) "diff set with s-exp"))
 (define-test (intersect-tests)
   (assert-equal '() (intersect '() '()) "two empty sets is empty")
   (assert-equal '(2) (intersect '(1 2) '(2 3)) "one shared atom")
   (assert-equal '() (intersect '(1 2) '(3 4)) "none found")
   (assert-equal '(1 (2 3)) (intersect '(1 (2 3) 7) '(4 1 (2 3) (4 1)))))
 (define-test (union-tests)
   (assert-equal '() (union '() '()) "union empty list is empty")
   (assert-equal '(1 2 3) (union '(1 2) '(3)) "union atoms")
   (assert-equal '(1 2 (3 4)) (union '(1 2) '((3 4))) "sexp"))
 (define-test (intersectall-test)
   (assert-equal '() (intersectall '(()()())) "empty sets")
   (assert-equal '(1) (intersectall '((1) (1 2) (1 2 3))) "one value found"))
 (define-test (a-pair?-tests)
   (assert-true (a-pair? '(pear
                           pear)) "two atoms")
   (assert-true (a-pair? '(3 7)) "2 numbers")
   (assert-true (a-pair? '((2) (pair))) "2 s-exp")
   (assert-true (a-pair? '(full (house))) "2 s-exp")
   (assert-false (a-pair? '()) "empty not pair")
   (assert-false (a-pair? '(1 2 3)) "three in a crowd")

   )
 (define-test (build-tests)
   (assert-true (a-pair? (build '() '())) "two empty lists make a pair")
   (assert-true (a-pair? (build 1 2)) "two atoms")
   (assert-true (a-pair? (build '(1 (1 2)) 3)) "sexp"))
 (define-test (first-tests)
   (assert-equal 1 (first (build 1 2)))
   (assert-equal '(1 2) (first (build '(1 2) 2))))
 (define-test (second-tests)
   (assert-equal 2 (second (build 1 2)))
   (assert-equal '(1 2) (second (build 1 '(1 2)))))
 (define-test (fun?-tests)
   (assert-true (fun? '((1 2) (2 3) (3 4))) "3 pairs no firsts same" )
   (assert-false (fun? '((1 2) (2 3) (2 4))) "dups exists in firsts")
   (assert-true (fun? '((1 2) (2 2) (3 2))) "dups only in seconds is a fun"))
 (define-test (revpair-tests)
   (assert-equal '(1 2) (revpair '(2 1)))
   (assert-equal '((1 2) (3 4)) (revpair '((3 4) (1 2)))))
 (define-test (revrel-tests)
   (assert-equal '((1 2) (3 4)) (revrel '((2 1) (4 3))) "reverse relation filled with atoms"))
 (define-test (seconds-tests)
   (assert-equal '() (seconds '()) "empty lists is empty")
   (assert-equal '(3 4) (seconds '((1 3) (2 4))) "seconds is rel"))
 (define-test (fullfun?-tests)
   (assert-true (fullfun? '((1 2) (1 3) (1 4))) "seconds make a set")
   (assert-false (fullfun? '((1 2) (1 3) (1 3))) "seconds no set"))
 (define-test (one-to-one?-tests)
   (assert-true (one-to-one? '((1 2) (1 3) (1 4))) "seconds make a set")
   (assert-false (one-to-one? '((1 2) (1 3) (1 3))) "seconds no set")))

(in-test-group
 08-lambda-the-ultimate
 (define-test (rember-f-tests)
   (assert-equal '(1 3) (rember-f eq? 2 '(1 2 3)))
   (assert-equal '(a c) (rember-f equal? 'b '(a b c))))
 (define-test (eq?-c-tests)
   (assert-true ((eq?-c 1) 1) "number match")
   (assert-false ((eq?-c 2) 1) "no dice")
   (assert-true (eq?-salad 'salad))
   (assert-false (eq?-salad 'saladd)))
 (define-test (rember-ff-tests)
   (assert-equal '(salad is good) ((rember-ff eq?) 'tuna '(tuna salad is good)))
   (assert-equal '(salad is good) (rember-eq? 'tuna '(tuna salad is good)))
   (assert-equal '(shrimp salad and salad)
                 ((rember-ff eq?) 'tuna '(shrimp salad and tuna salad)))
   (assert-equal '(equal? eqan? eqlist? eqpair?)
                 ((rember-ff eq?) 'eq? '(equal? eq? eqan? eqlist? eqpair?))))
 (define-test (insertL-f-tests)
   (assert-equal '(1 2 2 3) ((insertL-f eq?) 2 2 '(1 2 3)))
   (assert-equal '(a b (b) c) ((insertL-f equal?) 'b '(b) '(a (b) c))))
 (define-test (insertR-f-tests)
   (assert-equal '(1 2 3 4) ((insertR-f eq?) 4 3 '(1 2 3)))
   (assert-equal '(a (b) z c) ((insertR-f equal?) 'z '(b) '(a (b) c))))
 (define-test (insert-g-tests)
   (assert-equal '(1 2 2 3) (insert-g-L 2 2 '(1 2 3)))
   (assert-equal '(1 2 2 3) (insert-g-LL 2 2 '(1 2 3)))
   (assert-equal '(1 2 3 4) (insert-g-R 4 3 '(1 2 3)))
   (assert-equal '(1 2 3 4) (insert-g-RR 4 3 '(1 2 3)))
   (assert-equal '(1 2 3 4) (subst-g 3 4 '(1 2 4 4))))
 (define-test (avalue-test)
   (assert-equal 20 (avalue '(5 * 4)) "value of single exression")
   (assert-equal 20 (avalue '(5 * (2 + 2))) "value of nested exressions"))
 (define-test (multirember-f-test)
   (assert-equal '(shrimp salad salad and)
                 ((multirember-f eq?)
                  'tuna
                  '(shrimp salad tuna salad and tuna)))
   (assert-equal '(shrimp salad salad and)
                 (multiremberT
                  eq?-tuna
                  '(shrimp salad tuna salad and tuna)))
   (assert-equal
    '(shrimp salad salad and)
    (multiremberT (lambda (x)
                    (eq? x 'tuna))
                  '(shrimp salad tuna salad and tuna)) "inline lambda"))
 (define-test (multirember&co-tests)
   (assert-true (multirember&co 'x '(a) a-friend))
   (assert-false (multirember&co 'a '(a) a-friend)))
 (define-test (multiinsertLR-tests)
   (assert-true '(a b c)
                (multiinsertLR
                 'b 'c 'z '(a c))
                "just to the left")
   (assert-true '(a b c)
                (multiinsertLR 'b 'z 'a '(a c))
                "just to right")
   (assert-equal '(a b c d b)
                 (multiinsertLR 'b 'c 'd '(a c d))
                 "left and right"))
 (define-test (multiinsertLR&co-tests)
   (assert-equal 0
                 (multiinsertLR&co 'a 'b 'c '() multiinsertLR&co-total-changes)
                 "insert nothing")
   (assert-equal 2
                 (multiinsertLR&co 'a 'aa 'bb '(aa aa) multiinsertLR&co-total-changes)
                 "insert to left"))
 (define-test (even?-tests)
   (assert-true (even? 0))
   (assert-true (even? 2))
   (assert-false (even? 1))
   (assert-false (even? 3)))
(define-test (evens-only*-tests)
  (assert-equal '((2 8) 10 (() 6) 2)
               (evens-only* '((9 1 2 8) 3 10 ((9 9) 7 6) 2))))
(define-test (evens-only*&co-tests)
  (assert-equal '(0 1)
                (evens-only*&co '() the-last-friend)
                "empty list")
  (assert-equal '(9 48 2 4 6)
                (evens-only*&co '(1 2 3 4 5 6) the-last-friend)
                "flat list")
  (assert-equal '(25 3840 (2 (4)) 6 8 10)
                (evens-only*&co '(1 (2 3 (4)) 5 6 7 8 9 10) the-last-friend)
                "nested")))

(in-test-group
 09-again-and-again
 (define-test (looking-tests)
   (assert-true (looking 'caviar '(6 2 4 caviar 5 7 3)))
   (assert-false (looking 'caviar '(6 2 grits caviar 5 7 3))))
(define-test (shift-tests)
  (assert-equal '(1 (2 2))
                (shift '((1 2) 2)))
  (assert-equal '(1 (2 (3 4)))
                (shift '((1 2) (3 4)))))
(define-test (length*-tests)
  (assert-equal 2 (length* '(1 1)))
  (assert-equal 3 (length* '((1 1) 2)))
  (assert-equal 4 (length* '((1 1) (2 2)))))
(define-test (weight*-tests)
  (assert-equal 7 (weight* '((a b) c)))
  (assert-equal 5 (weight* '(a (b c)))))
(define-test (collatz-tests)
  (assert-equal 1 (C 2))
  (assert-equal 1 (C 2343243423)))

 )


(run-registered-tests)
