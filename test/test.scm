(load "./../src/source.scm")
(load "./../lib/test-manager/load.scm")

(in-test-group
 toys
 (define-test (atom-tests)
   (assert-true (atom? 'turkey) "Symbol is an atom")
   (assert-true (atom? 1492) "Number is an atom")
   (assert-true (atom? 'u) "Sumbol length 1 is an atom")
   (assert-true (atom? '*abc$) "Symbol with special chars is atom")
   (assert-false (atom? '()) "Empty list is not an atom"))
 (define-test (car-tests)
   (assert-equal 'a (car '(a b c))
                 "Car removes first atom in non empty list")
   (assert-equal '(a b c) (car '((a b c) x y z))
                 "Removes a list")
   (assert-equal '((hotdogs)) (car '(((hotdogs)) (and) (pickle) relish))
                 "Remove list of list"))
 (define-test (cdr-tests)
   (assert-equal '(b c) (cdr '(a b c))
                 "from non empty list")
   (assert-equal '(x y z) (cdr '((a b c) x y z))
                 "from nested sexp")
   (assert-equal '() (cdr '(hamburger))
                 "empty when list length 1"))
 (define-test (cons-tests)
   (assert-equal '(peanut butter and jelly)
                 (cons 'peanut '(butter and jelly))
                 "Cons symbol onto list")
   (assert-equal '((banana and) peanut butter and jelly)
                 (cons '(banana and) '(peanut butter and jelly))
                 "Cons list onto list")
   (assert-equal '(((help) this) is very ((hard) to learn))
                 (cons '((help) this) '(is very ((hard) to learn)))
                 "cons sexp onto sexp")
   (assert-equal '((a b (c))) (cons '(a b (c)) '())
                 "cons sexp onto empty list")
   (assert-equal '(a) (cons 'a '())
                 "cons symbol onto empty list"))
 (define-test (null-tests)
   (assert-true (null? '()) "empty list is null")
   (assert-false (null? '(a b c)) "non empty list is not null")
   (assert-false (null? 'spaghetti) "symbol is not null"))
 )


(in-test-group
 do-it-do-it-again-and-again-and-again
 (define-test (atom-test)
   (assert-true (lat? '(Jack Sprat could eat no chicken fat))
                "many symbols is as list is a lat")
   (assert-false (lat? '((Jack) could eat no chicken fat))
                 "sexp of symbols is not lat")
   (assert-true (lat? '())
                "empty list is a lat"))
 (define-test (member-test)
   (assert-false (member? 'poached '(fried eggs and scrambled eggs))
                 "Symbol is not in list")
   (assert-true (member? 'meat '(mashed potatoes and meat gravy))
                 "Symbol is in list")
   (assert-false (member? 'liver '())
                 "Symbol is not in empty list")))

(in-test-group
 cons-the-magnificent
 (define-test (rember-test)
   (assert-equal '(lamb chops and jelly)
                 (rember 'mint '(lamb chops and mint jelly))
                 "Remove one symbol from list")
   (assert-equal '(lamb chops and flavored mint jelly)
                 (rember 'mint '(lamb chops and mint flavored mint jelly))
                 "Only remove first symbol from list")
   (assert-equal '(lamb chops and jelly)
                 (rember 'missing '(lamb chops and jelly))
                 "Do not remove when member not found."))
 (define-test (firsts-test)
   (assert-equal '(apple plum grape bean)
                 (firsts '((apple peach pumpkin)
                           (plum pear cherry)
                           (grape raisin pea)
                           (bean carrot eggplant)))
                 "first item in each listt"))
 (define-test (insertR-test)
   (assert-equal '(ice cream with fudge topping for dessert)
                 (insertR 'topping 'fudge '(ice cream with fudge for dessert))
                 "insert symb to right of another")
   (assert-equal '(ice cream with fudge for dessert)
                 (insertR 'topping 'bogus '(ice cream with fudge for dessert))
                 "insert not found "))
 (define-test (insertL-test)
   (assert-equal '(ice cream with topping fudge for dessert)
                 (insertL 'topping 'fudge '(ice cream with fudge for dessert))
                 "insert found value to left of symbol")
   (assert-equal '(ice cream with fudge for dessert)
                 (insertL 'topping 'bogus '(ice cream with fudge for dessert))
                 "insert not found"))
 (define-test (subst2-test)
   (assert-equal '(vanilla ice cream with chocolate topping)
                 (subst2 'vanilla 'chocolate 'banana
                         '(banana ice cream with chocolate topping))
                 "change first found value")
   (assert-equal '(vanilla bananna ice cream with  topping)
                 (subst2 'vanilla 'bananna 'chocolate
                         '(chocolate bananna ice cream with topping))
                 "second search symb is found first"))
 (define-test (multirember-test)
   (assert-equal '(coffee tea and hick)
                 (multirember 'cup '(coffee cup tea cup and hick cup))
                 "remove item when in list twice"))
 (define-test (multiinsertR-test)
   (assert-equal '(i love coffee tea and more coffee tea)
                 (multiinsertR 'tea 'coffee 
                               '(i love coffee and more coffee))
                 "insert 2 values to right"))
 (define-test (multiinsertL-test)
   (assert-equal '(i love tea coffee and more tea coffee)
                 (multiinsertL  'tea 'coffee 
                                    '(i love coffee and more coffee))
                 "isnert 2 values to left"))
 (define-test (multisubst-test)
   (assert-equal '(a a a)
                 (multisubst 'a 'b  '(b b b))
                 "replace all occurances of b with a")
   (assert-equal '(a a a)
                 (multisubst 'q 'f '(a a a))
                 "no replacements found")))

 (run-registered-tests)



