(load "./../src/08-lambda-the-ultimate.scm")
(load "./../lib/test-manager/load.scm")

(in-test-group
 08-lambda-the-ultimate
 (define-test (rember-f-tests)
   (assert-equal '(1 3) (rember-f eq? 2 '(1 2 3)))
   (assert-equal '(a c) (rember-f equal? 'b '(a b c))))
 (define-test (eq?-c-tests)
   (assert-true ((eq?-c 1) 1) "number match")
   (assert-false ((eq?-c 2) 1) "no dice")
   (assert-true (eq?-salad 'salad))
   (assert-false (eq?-salad 'saladd)))
 (define-test (rember-ff-tests)
   (assert-equal '(salad is good) ((rember-ff eq?) 'tuna '(tuna salad is good)))
   (assert-equal '(salad is good) (rember-eq? 'tuna '(tuna salad is good)))
   (assert-equal '(shrimp salad and salad)
                 ((rember-ff eq?) 'tuna '(shrimp salad and tuna salad)))
   (assert-equal '(equal? eqan? eqlist? eqpair?)
                 ((rember-ff eq?) 'eq? '(equal? eq? eqan? eqlist? eqpair?))))
 (define-test (insertL-f-tests)
   (assert-equal '(1 2 2 3) ((insertL-f eq?) 2 2 '(1 2 3)))
   (assert-equal '(a b (b) c) ((insertL-f equal?) 'b '(b) '(a (b) c))))
 (define-test (insertR-f-tests)
   (assert-equal '(1 2 3 4) ((insertR-f eq?) 4 3 '(1 2 3)))
   (assert-equal '(a (b) z c) ((insertR-f equal?) 'z '(b) '(a (b) c))))
 (define-test (insert-g-tests)
   (assert-equal '(1 2 2 3) (insert-g-L 2 2 '(1 2 3)))
   (assert-equal '(1 2 2 3) (insert-g-LL 2 2 '(1 2 3)))
   (assert-equal '(1 2 3 4) (insert-g-R 4 3 '(1 2 3)))
   (assert-equal '(1 2 3 4) (insert-g-RR 4 3 '(1 2 3)))
   (assert-equal '(1 2 3 4) (subst-g 3 4 '(1 2 4 4))))
 (define-test (avalue-test)
   (assert-equal 20 (avalue '(5 * 4)) "value of single exression")
   (assert-equal 20 (avalue '(5 * (2 + 2))) "value of nested exressions"))
 (define-test (multirember-f-test)
   (assert-equal '(shrimp salad salad and)
                 ((multirember-f eq?)
                  'tuna
                  '(shrimp salad tuna salad and tuna)))
   (assert-equal '(shrimp salad salad and)
                 (multiremberT
                  eq?-tuna
                  '(shrimp salad tuna salad and tuna)))
   (assert-equal
    '(shrimp salad salad and)
    (multiremberT (lambda (x)
                    (eq? x 'tuna))
                  '(shrimp salad tuna salad and tuna)) "inline lambda"))
 (define-test (multirember&co-tests)
   (assert-true (multirember&co 'x '(a) a-friend))
   (assert-false (multirember&co 'a '(a) a-friend)))
 (define-test (multiinsertLR-tests)
   (assert-true '(a b c)
                (multiinsertLR
                 'b 'c 'z '(a c))
                "just to the left")
   (assert-true '(a b c)
                (multiinsertLR 'b 'z 'a '(a c))
                "just to right")
   (assert-equal '(a b c d b)
                 (multiinsertLR 'b 'c 'd '(a c d))
                 "left and right"))
 (define-test (multiinsertLR&co-tests)
   (assert-equal 0
                 (multiinsertLR&co 'a 'b 'c '() multiinsertLR&co-total-changes)
                 "insert nothing")
   (assert-equal 2
                 (multiinsertLR&co 'a 'aa 'bb '(aa aa) multiinsertLR&co-total-changes)
                 "insert to left"))
 (define-test (even?-tests)
   (assert-true (even? 0))
   (assert-true (even? 2))
   (assert-false (even? 1))
   (assert-false (even? 3)))
 (define-test (evens-only*-tests)
   (assert-equal '((2 8) 10 (() 6) 2)
                 (evens-only* '((9 1 2 8) 3 10 ((9 9) 7 6) 2))))
 (define-test (evens-only*&co-tests)
   (assert-equal '(0 1)
                 (evens-only*&co '() the-last-friend)
                 "empty list")
   (assert-equal '(9 48 2 4 6)
                 (evens-only*&co '(1 2 3 4 5 6) the-last-friend)
                 "flat list")
   (assert-equal '(25 3840 (2 (4)) 6 8 10)
                 (evens-only*&co '(1 (2 3 (4)) 5 6 7 8 9 10) the-last-friend)
                 "nested")))

(run-registered-tests)
