(load "./../src/07-friends-and-relations.scm")
(load "./../lib/test-manager/load.scm")

(in-test-group
 07-friends-and-relations
 (define-test (set-tests)
   (assert-true (set? '()) "empty lat is set")
   (assert-true (set? '(1 2 3)) "unique numbeurs lat is set")
   (assert-false (set? '(1 2 2)) "lat with dup numbers is not set")
   (assert-true (set? '(a b c)) "unique symbol lat is set")
   (assert-false (set? '(a b b c)) "dup symbol lat is set")
   (assert-true (set? '(a b 1 2)) "unique symbols and numbers"))
 (define-test (subset?-tests)
   (assert-true (subset? '() '()) "empty list is subset of empty list")
   (assert-true (subset? '(2) '(2 3)) "one number found in list")
   (assert-false (subset? '(2) '(3 4)) "number not found in list")
   (assert-true (subset? '(2 0 3) '(3 0 4 2)) "numbers found in list")
   (assert-false (subset? '(2 0 3) '(3 0 4 5)) "numbers not found in second"))
 (define-test (eqset?-tests)
   (assert-true (eqset? '() '()) "empty sets are equal")
   (assert-true (eqset? '(1 2) '(1 2)) "same sets equal")
   (assert-false (eqset? '(1 3) '(1 2 3)) "not equal")
   (assert-false (eqset? '(1 (1 2)) '(1 (1 2 3))) "diff set with s-exp"))
 (define-test (intersect-tests)
   (assert-equal '() (intersect '() '()) "two empty sets is empty")
   (assert-equal '(2) (intersect '(1 2) '(2 3)) "one shared atom")
   (assert-equal '() (intersect '(1 2) '(3 4)) "none found")
   (assert-equal '(1 (2 3)) (intersect '(1 (2 3) 7) '(4 1 (2 3) (4 1)))))
 (define-test (union-tests)
   (assert-equal '() (union '() '()) "union empty list is empty")
   (assert-equal '(1 2 3) (union '(1 2) '(3)) "union atoms")
   (assert-equal '(1 2 (3 4)) (union '(1 2) '((3 4))) "sexp"))
 (define-test (intersectall-test)
   (assert-equal '() (intersectall '(()()())) "empty sets")
   (assert-equal '(1) (intersectall '((1) (1 2) (1 2 3))) "one value found"))
 (define-test (a-pair?-tests)
   (assert-true (a-pair? '(pear
                           pear)) "two atoms")
   (assert-true (a-pair? '(3 7)) "2 numbers")
   (assert-true (a-pair? '((2) (pair))) "2 s-exp")
   (assert-true (a-pair? '(full (house))) "2 s-exp")
   (assert-false (a-pair? '()) "empty not pair")
   (assert-false (a-pair? '(1 2 3)) "three in a crowd")

   )
 (define-test (build-tests)
   (assert-true (a-pair? (build '() '())) "two empty lists make a pair")
   (assert-true (a-pair? (build 1 2)) "two atoms")
   (assert-true (a-pair? (build '(1 (1 2)) 3)) "sexp"))
 (define-test (first-tests)
   (assert-equal 1 (first (build 1 2)))
   (assert-equal '(1 2) (first (build '(1 2) 2))))
 (define-test (second-tests)
   (assert-equal 2 (second (build 1 2)))
   (assert-equal '(1 2) (second (build 1 '(1 2)))))
 (define-test (fun?-tests)
   (assert-true (fun? '((1 2) (2 3) (3 4))) "3 pairs no firsts same" )
   (assert-false (fun? '((1 2) (2 3) (2 4))) "dups exists in firsts")
   (assert-true (fun? '((1 2) (2 2) (3 2))) "dups only in seconds is a fun"))
 (define-test (revpair-tests)
   (assert-equal '(1 2) (revpair '(2 1)))
   (assert-equal '((1 2) (3 4)) (revpair '((3 4) (1 2)))))
 (define-test (revrel-tests)
   (assert-equal '((1 2) (3 4)) (revrel '((2 1) (4 3))) "reverse relation filled with atoms"))
 (define-test (seconds-tests)
   (assert-equal '() (seconds '()) "empty lists is empty")
   (assert-equal '(3 4) (seconds '((1 3) (2 4))) "seconds is rel"))
 (define-test (fullfun?-tests)
   (assert-true (fullfun? '((1 2) (1 3) (1 4))) "seconds make a set")
   (assert-false (fullfun? '((1 2) (1 3) (1 3))) "seconds no set"))
 (define-test (one-to-one?-tests)
   (assert-true (one-to-one? '((1 2) (1 3) (1 4))) "seconds make a set")
   (assert-false (one-to-one? '((1 2) (1 3) (1 3))) "seconds no set")))


(run-registered-tests)

