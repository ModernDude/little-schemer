(load "./../src/01-toys.scm")
(load "./../lib/test-manager/load.scm")

(in-test-group
 01-toys
 (define-test (atom-tests)
   (assert-true (atom? 'turkey) "Symbol is an atom")
   (assert-true (atom? 1492) "Number is an atom")
   (assert-true (atom? 'u) "Sumbol length 1 is an atom")
   (assert-true (atom? '*abc$) "Symbol with special chars is atom")
   (assert-false (atom? '()) "Empty list is not an atom"))
 (define-test (car-tests)
   (assert-equal 'a
                 (car '(a b c))
                 "Car removes first atom in non empty list")
   (assert-equal '(a b c)
                 (car '((a b c) x y z))
                 "Removes a list")
   (assert-equal '((hotdogs))
                 (car '(((hotdogs)) (and) (pickle) relish))
                 "Remove list of list"))
 (define-test (cdr-tests)
   (assert-equal '(b c)
                 (cdr '(a b c))
                 "from non empty list")
   (assert-equal '(x y z)
                 (cdr '((a b c) x y z))
                 "from nested sexp")
   (assert-equal '()
                 (cdr '(hamburger))
                 "empty when list length 1"))
 (define-test (cons-tests)
   (assert-equal '(peanut butter and jelly)
                 (cons 'peanut '(butter and jelly))
                 "Cons symbol onto list")
   (assert-equal '((banana and) peanut butter and jelly)
                 (cons '(banana and) '(peanut butter and jelly))
                 "Cons list onto list")
   (assert-equal '(((help) this) is very ((hard) to learn))
                 (cons '((help) this) '(is very ((hard) to learn)))
                 "cons sexp onto sexp")
   (assert-equal '((a b (c))) (cons '(a b (c)) '())
                 "cons sexp onto empty list")
   (assert-equal '(a) (cons 'a '())
                 "cons symbol onto empty list"))
 (define-test (null-tests)
   (assert-true (null? '()) "empty list is null")
   (assert-false (null? '(a b c)) "non empty list is not null")
   (assert-false (null? 'spaghetti) "symbol is not null"))
 )

(run-registered-tests)

