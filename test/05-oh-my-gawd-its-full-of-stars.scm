(load "./../src/05-oh-my-gawd-its-full-of-stars.scm")
(load "./../lib/test-manager/load.scm")


(in-test-group
 05-oh-my-gawd-its-full-of-stars
 (define-test (rember*-tests)
   (assert-equal '(coffee tea)
                 (rember* 'cup '(cup coffee cup tea cup))
                 "Remove atoms from list")
   (assert-equal '((coffee) ((tea)) (and (hick)))
                 (rember* 'cup '((coffee) cup ((tea) cup) (and (hick)) cup))
                 "Remove atoms from sexp"))
 (define-test (insertR*-tests)
   (assert-equal '(first second third)
                 (insertR* 'second 'first '(first third))
                 "insert to right in list" )
   (assert-equal '((how much (wood))
                   could
                   ((a (wood) chuck roast))
                   (((chuck roast)))
                   (if (a) ((wood chuck roast)))
                   could chuck roast wood)
                 (insertR*
                  'roast
                  'chuck
                  '((how much (wood))
                    could
                    ((a (wood) chuck))
                    (((chuck)))
                    (if (a) ((wood chuck)))
                    could chuck wood))
                 "Insert to right in a sexp"))
 (define-test (occur*-tests)
   (assert-equal 0
                 (occur* 'a '(b c d))
                 "zero when not found in list")
   (assert-equal 3
                 (occur* 'a '(a b a c d e a))
                 "atom found in list")
   (assert-equal 4
                 (occur* 'a '(a (b a) (a (j j a))))
                 "atom found in sexp"))
 (define-test (subst*-tests)
   (assert-equal '(a b c d)
                 (subst* 'e 'f '(a b c d))
                 "subst not found")
   (assert-equal '(a f c d f)
                 (subst* 'f 'b '(a b c d b))
                 "found in list")
   (assert-equal '(a f c d (x f (f) f))
                 (subst* 'f 'b '(a b c d (x b (b) b)))
                 "found in sexp"))
 (define-test (insertL*-tests)
   (assert-equal '(a b c e)
                 (insertL* 'x 'f '(a b c e))
                 "not found in list")
   (assert-equal '(a b c x e x e)
                 (insertL* 'x 'e '(a b c e e))
                 "insert to left i nlist")
   (assert-equal '(x b (x b a (x b a) x b a))
                 (insertL* 'x 'b '(b (b a (b a) b a)))))
 (define-test (member*-tests)
   (assert-false (member* 'a '(b c d)) "not in list")
   (assert-true (member* 'a '(a b e d)) "found in list")
   (assert-true (member* 'a '(b (b a))) "found in sexp"))
 (define-test (leftmost)
   (assert-equal 'a (leftmost '(a b c d)) "left most in list")
   (assert-equal 'a (leftmost '(((a (((a b c))))))) "left most in sexp"))
 (define-test (_equal?-tests)
   (assert-true (_equal? '() '()) "empty lists are equal")
   (assert-true (_equal? 'a 'a) "same atoms are equal")
   (assert-true (_equal? 3 3) "numbers equal")
   (assert-true (_equal? '(1 2 3) '(1 2 3)) "list of nums eq")
   (assert-true (_equal? '(a b c) '(a b c)) "list of atoms eq")
   (assert-true (_equal? '(a 1 b 2) '(a 1 b 2)) "list nums and atoms eq")
   (assert-false (_equal? 'a 'b) "diff atoms not eq")
   (assert-false (_equal? 2 1) "diff noms not eq")
   (assert-false (_equal? '(1 2 3) '(1 2 3 4)) "list nums not eq")
   (assert-false (_equal? '(a b c) '(a b c d)) "list atoms not eq"))
 (define-test (eqlist?-tests)
   (assert-true (eqlist? '(1 2 3) '(1 2 3)) "list of nums are eq")
   (assert-false (eqlist? '(1 2 3) '(1 2)) "number list is not equal")
   (assert-true (eqlist? '(a b c) '(a b c)) "atom list is equal")
   (assert-false (eqlist? '(a b c) '(a b)) "atom list is not equal")
   (assert-true (eqlist? '(a 1) '(a 1)) "atom and num list is eq")
   (assert-false (eqlist? '(a 2) '(a 1)) "atom and num list is not eq")
   (assert-true (eqlist? '(a (a 2 (a))) '(a (a 2 (a)))) "sexp is eq")
   (assert-false (eqlist? '(a (1 2 a)) '(x (1 2 a))) "sexp is not eq")))

(run-registered-tests)
